// Contains the definitions for Microgrid gRPC API.
//
// Copyright:
// Copyright 2022 Frequenz Energy-as-a-Service GmbH
//
// License:
// MIT

syntax = "proto3";

package frequenz.api.microgrid.v1;

import "frequenz/api/microgrid/v1/battery.proto";
import "frequenz/api/microgrid/v1/ev_charger.proto";
import "frequenz/api/microgrid/v1/fuse.proto";
import "frequenz/api/microgrid/v1/grid.proto";
import "frequenz/api/microgrid/v1/inverter.proto";
import "frequenz/api/microgrid/v1/meter.proto";
import "frequenz/api/microgrid/v1/precharger.proto";
import "frequenz/api/microgrid/v1/relay.proto";
import "frequenz/api/microgrid/v1/sensor.proto";
import "frequenz/api/microgrid/v1/voltage_transformer.proto";

import "frequenz/api/common/v1/components.proto";
import "frequenz/api/common/v1/location.proto";
import "frequenz/api/common/v1/metrics.proto";
import "frequenz/api/common/v1/sensors.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service Microgrid {
  /// Returns the microgrid metadata
  /// The metadata consists of information that describes the overall
  /// microgrid, as opposed to its electrical components or sensors,
  /// e.g., the microgrid ID, location.
  rpc GetMicrogridMetadata(google.protobuf.Empty) returns (MicrogridMetadata) {
    option (google.api.http) = {
      get : "/v1/metadata"
    };
  }

  // List electrical components in the local microgrid, optionally filtered by a
  // given list of component IDs and component categories.
  //
  // Electrical components are a part of a microgrid's electrical infrastructure
  // are can be connected to each other to form an electrical circuit, which can
  // then be represented as a graph.
  //
  // If provided, the filters for component IDs and categories have an `AND`
  // relationship with one another, meaning that they are applied serially,
  // but the elements within a single filter list have an `OR` relationship with
  // each other.
  // E.g., if `ids` = [1, 2, 3], and `categories` = [
  //  `ComponentCategory::COMPONENT_CATEGORY_INVERTER`,
  //  `ComponentCategory::COMPONENT_CATEGORY_BATTERY`],
  // then the results will consist of elements that
  // have the IDs 1, OR 2, OR 3,
  // AND
  // are of the categories `ComponentCategory::COMPONENT_CATEGORY_INVERTER` OR
  // `ComponentCategory::COMPONENT_CATEGORY_BATTERY`.
  //
  // If a filter list is empty, then that filter is not applied.
  rpc ListComponents(ListComponentsRequest) returns (ListComponentsResponse) {
    option (google.api.http) = {
      get : "/v1/components"
    };
  }

  // Returns a list of sensors in the local microgrid, optionally filtered by a
  // given list of sensor IDs and sensor categories.
  //
  // Sensors measure physical metrics in the microgrid's surroundings, and are
  // not classified as electrical components.
  //
  // If provided, the filters for sensor IDs and categories have an `AND`
  // relationship with one another, meaning that they are applied serially,
  // but the elements within a single filter list have an `OR` relationship with
  // each other.
  // E.g., if `ids` = [1, 2, 3], and `categories` = [
  //  `SensorCategory::SENSOR_CATEGORY_THERMOMETER`,
  //  `SensorCategory::SENSOR_CATEGORY_HYGROMETER`],
  // then the results will consist of elements that
  // have the IDs 1, OR 2, OR 3,
  // AND
  // are of the categories `SensorCategory::SENSOR_CATEGORY_THERMOMETER` OR
  // `SensorCategory::SENSOR_CATEGORY_HYGROMETER`.
  //
  // If a filter list is empty, then that filter is not applied.
  rpc ListSensors(ListSensorRequest) returns (ListSensorsResponse) {
    option (google.api.http) = {
      get : "/v1/sensors"
    };
  }

  // Electrical components are a part of a microgrid's electrical infrastructure
  // are can be connected to each other to form an electrical circuit, which can
  // then be represented as a graph.
  //
  // This RPC return a list of the connections between two components, denoted
  // by `(start, end)`. The direction of a connection is always away from the
  // grid endpoint, i.e. aligned with the direction of positive current
  // according to the passive sign convention:
  // https://en.wikipedia.org/wiki/Passive_sign_convention
  //
  // The request may be filtered by `start`/`end` component(s) of individual
  // connections.  If provided, the `start` and `end` filters have an `AND`
  // relationship between each other, meaning that they are applied serially,
  // but an `OR` relationship with other elements in the same list.
  // For example, if `start` = `[1, 2, 3]`, and `end` = `[4, 5, 6]`, then the
  // result should have all the connections where
  // * each `start` component ID is either `1`, `2`, OR `3`,
  //  AND
  // * each `end` component ID is either `4`, `5`, OR `6`.
  rpc ListConnections(ListConnectionsRequest)
    returns (ListConnectionsResponse) {
    option (google.api.http) = {
      get : "/v1/connections"
    };
  }

  // Returns a stream containing data from a component with a given ID.
  rpc SubscribeComponentData(SubscribeComponentDataRequest)
    returns (stream ComponentData) {
    option (google.api.http) = {
      get : "/v1/components/{id}/data"
    };
  }

  // Returns a stream containing data from a sensor with a given ID.
  rpc SubscribeSensorData(SubscribeSensorDataRequest)
    returns (stream SensorData) {
    option (google.api.http) = {
      get : "/v1/sensors/{id}/data"
    };
  }

  // Adds exclusion bounds for a given metric of a given component, and returns
  // the UTC timestamp until which the given exclusion bounds will stay in
  // effect.
  //
  // Exclusion bounds refer to the range of values that are disallowed for the
  // metric. If these bounds for a metric are [`lower`, `upper`], then this
  // metric's `value` needs to comply with the constraints
  // `value <= lower` OR `upper <= value`.
  //
  // Exclusion bounds are a useful tool for enhancing the performance of a
  // system. They can be used to restrict the acceptance of commands that fall
  // below a certain threshold, which can help ensure the smooth functioning of
  // the system.
  // E.g., exclusion bounds can be set to limit the minimum charging power to a
  // sufficiently high level, preventing a peak-shaver client from sending
  // charge powers that are too low when a DC heater client is executing a
  // charge pulse. This can significantly improve the overall performance of the
  // DC heating mechanism.
  //
  //
  // If multiple exclusion bounds have been provided bor a metric, then the
  // aggregated lower and upper exclusion bounds are calculated as follows:
  // lower: the minimum of all lower exclusion bounds
  // upper: the maximum of all upper exclusion bounds
  //
  // It is important to note that these bounds work together with
  // `system_inclusion_bounds`.
  //
  // E.g., for the system to accept a charge command,
  // clients need to request power values within the bounds
  // `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`.
  // This means that clients can only request charge commands with values that
  // are within the `system_inclusion_bounds`, but not within
  // `system_exclusion_bounds`.
  // Similarly, for the system to accept a discharge command,
  // clients need to request power values within the bounds
  // `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`.
  //
  // The following diagram illustrates the relationship between the bounds.
  // ```
  //   inclusion.lower                              inclusion.upper
  // <-------|============|------------------|============|--------->
  //                exclusion.lower    exclusion.upper
  // ```
  // ---- values here are disallowed and wil be rejected
  // ==== vales here are allowed and will be accepted
  rpc AddComponentExclusionBounds(AddComponentExclusionBoundsRequest)
    returns (AddComponentExclusionBoundsResponse);

  // Adds inclusion bounds for a given metric of a given component, and returns
  // the UTC timestamp until which the given inclusion bounds will stay in
  // effect.
  //
  // Inclusion bounds refer to the range of values that are allowed for the
  // metric. If these bounds for a metric are [`lower`, `upper`], then this
  // metric's `value` needs to comply with the constraint
  // `lower <= value <= upper`.
  //
  // If multiple inclusion bounds have been provided bor a metric, then the
  // aggregated lower and upper inclusion bounds are calculated as follows:
  // lower: the maximum of all lower inclusion bounds
  // upper: the minimum of all upper inclusion bounds
  //
  // It is important to note that these bounds work together with
  // `system_exclusion_bounds`.
  //
  // E.g., for the system to accept a charge command,
  // clients need to request power values within the bounds
  // `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`.
  // This means that clients can only request charge commands with values that
  // are within the `system_inclusion_bounds`, but not within
  // `system_exclusion_bounds`.
  // Similarly, for the system to accept a discharge command,
  // clients need to request power values within the bounds
  // `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`.
  //
  // The following diagram illustrates the relationship between the bounds.
  // ```
  //   inclusion.lower                              inclusion.upper
  // <-------|============|------------------|============|--------->
  //                exclusion.lower    exclusion.upper
  // ```
  // ---- values here are disallowed and wil be rejected
  // ==== vales here are allowed and will be accepted
  rpc AddComponentInclusionBounds(AddComponentInclusionBoundsRequest)
    returns (AddComponentInclusionBoundsResponse);

  // Sets the active power output of a component with a given ID, provided the
  // component supports it.
  //
  // Note that the target component may have a resolution of more than 1 W.
  // E.g., an inverter may have a resolution of 88 W.
  // In such cases, the magnitude of power will be floored to the nearest
  // multiple of the resolution.
  //
  // Performs the following sequence actions for the following component
  // categories:
  //
  // * Inverter: Sends the discharge command to the inverter, making it deliver
  //  AC power.
  rpc SetComponentPowerActive(SetComponentPowerActiveRequest)
    returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{component_id}/setPowerActive/{power}"
    };
  }

  // Sets the reactive power output of a component with a given ID, provided the
  // component supports it.
  //
  // Note that the target component may have a resolution of more than 1 VAr.
  // E.g., an inverter may have a resolution of 88 VAr.
  // In such cases, the magnitude of power will be floored to the nearest
  // multiple of the resolution.
  rpc SetComponentPowerReactive(SetComponentPowerReactiveRequest)
    returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{component_id}/setPowerReactive/{power}"
    };
  }

  // Starts the component, and brings it into a state where it is immediately
  // operational.
  //
  // Performs the following sequence of actions for the following component
  // categories:
  //
  // * Inverter:
  //  * closes DC relays, if the feature is available
  //  * closes AC relays
  //  * sets power output to 0
  //
  // * Battery: Checks if DC relays are open, then
  //  * closes DC relays
  //
  // * Relays:
  //  * closes relays
  //
  // * Precharge Modules:
  //  * starts the precharge process, and eventually closes the DC relays.
  //
  // If any of the above mentioned actions for a given component has already
  // been performed, then this method call effectively skips that action.
  //
  // If a feature required to perform an action is missing, then that action is
  // skipped.
  rpc StartComponent(StartComponentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{id}/start"
    };
  }

  // Sets the given component into a hot-standby state, from which it can return
  // into an operational state within at most 5 seconds.
  //
  // Performs the following sequence actions for the following component
  // categories:
  //
  // * Inverter: Checks if AC and DC relays are closed, then
  //  * sets power to 0
  //
  // If any of the checks mentioned above fails, then the method call returns an
  // error.
  //
  // If any of the above mentioned actions for a given component has already
  // been performed, then this method call effectively skips that action.
  rpc HotStandbyComponent(HotStandbyComponentRequest)
    returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{id}/hotStandby"
    };
  }

  // Sets the given component into a cold-standby state, from which it can
  // return into an operational state within at most 2 minutes.
  //
  // Performs the following sequence actions for the following component
  // categories:
  //
  // * Inverter: Checks if AC and DC relays are closed, then
  //  * sets power to 0, and
  //  * opens AC relays
  //
  // If any of the checks mentioned above fails, then the method call returns an
  // error.
  //
  // If any of the above mentioned actions for a given component has already
  // been performed, then this method call efffectively skips that action.
  rpc ColdStandbyComponent(ColdStandbyComponentRequest)
    returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{id}/coldStandby"
    };
  }

  // Stops the component completely, potentially disengaging its power
  // electronics controller(s).
  //
  // Performs the following sequence actions for the following component
  // categories:
  //
  // * Inverter:
  //  * Brings component to the cold-standby state
  //  * opens DC relays
  //
  // * Battery: Checks if the power output is 0, then
  //  * opens DC relays
  //
  // * Relays:
  //  * opens relays
  //
  // * Precharge Modules:
  //  * opens the DC relays.
  //
  // If any of the checks mentioned above fails, then the method call returns an
  // error.
  //
  // If any of the above mentioned actions for a given component has already
  // been performed, then this method call effectively skips that action.
  //
  // If a feature required to perform an action is missing, then that action is
  // skipped.
  rpc StopComponent(StopComponentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{id}/stop"
    };
  }

  // Acknowledges any recoverable error reported by the component, and brings it
  // back to the stopped or cold-standby state.
  rpc AckComponentError(AckComponentErrorRequest)
    returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/components/{id}/errorAck"
    };
  }
}

// Metadata that describes a microgrid.
message MicrogridMetadata {
  // The microgrid ID.
  // This is a natural number that uniquely identifies a given microgrid.
  uint64 microgrid_id = 1;

  // The location of the microgrid, in geographical co-ordinates.
  frequenz.api.common.v1.location.Location location = 2;
}

// Request parameters for the RPC `ListComponents`.
// Contains filtering parameters for listing components.
message ListComponentsRequest {
  // Return components that have the specified IDs only.
  repeated uint64 component_ids = 1;

  // Return components that have the specified categories only.
  repeated frequenz.api.common.v1.components.ComponentCategory categories = 2;
}

// A message containing the metadata for a component.
message Component {
  // The component ID.
  uint64 id = 1;

  // The component name.
  string name = 2;

  // The component category. E.g., Inverter, Battery, etc.
  frequenz.api.common.v1.components.ComponentCategory category = 3;

  // The component manufacturer.
  string manufacturer = 4;

  // The model name of the component.
  string model_name = 5;

  // The metadata specific to the component category.
  oneof metadata {
    grid.Metadata grid = 11;
    battery.Metadata battery = 12;
    inverter.Metadata inverter = 13;
    meter.Metadata meter = 14;
    ev_charger.Metadata ev_charger = 15;
    fuse.Metadata fuse = 17;
    voltage_transformer.Metadata voltage_transformer = 18;
  }
}

// A message containing a list of components.
// Used as the return type in the RPC `ListComponents`.
message ListComponentsResponse {
  repeated Component components = 1;
}

// Request parameters for the RPC `ListSensors`.
// Contains filtering parameters for listing sensors.
message ListSensorRequest {
  // Return sensors that have the specified IDs only.
  repeated uint64 sensor_ids = 1;

  // Return sensors that have the specified categories only.
  repeated frequenz.api.common.v1.sensors.SensorCategory categories = 2;
}

// A sensor that measures a physical metric in the microgrid's surrounding
// environment.
message Sensor {
  // A unique identifier for the sensor.
  uint64 id = 1;

  // An optional name for the sensor.
  string name = 2;

  // The category of the sensor.
  frequenz.api.common.v1.sensors.SensorCategory category = 3;

  // The sensor manufacturer.
  string manufacturer = 4;

  // The model name of the sensor.
  string model_name = 5;
}

// Response message for the RPC `ListSensors`.
// A message containing a list of sensors.
message ListSensorsResponse {
  repeated Sensor sensors = 1;
}

// Request parameters for the RPC `ListConnections`.
// Contains filtering parameters for listing connections.
message ListConnectionsRequest {
  // Only return connections that start from the specified component ID(s):
  // if empty, connections with any `start` will be returned
  repeated uint64 starts = 1;

  // Only return connections that end at the specified component ID(s):
  // if empty, connections with any `end` will be returned
  repeated uint64 ends = 2;
}

// Describes a single connection between components of the microgrid,
// with direction away from the grid endpoint, meaning it is aligned
// with positive current according to the passive sign convention:
// https://en.wikipedia.org/wiki/Passive_sign_convention
message Connection {
  // `id` of the component the connection starts from
  uint64 start = 1;

  // `id` of the component the connection points to
  uint64 end = 2;
}

// Response message for the RPC `ListConnections`.
// Contains a list of connections.
message ListConnectionsResponse {
  // The list of connections.
  repeated Connection connections = 1;
};

// Request parameters for the RPC `SubscribeComponentData`.
message SubscribeComponentDataRequest {
  // The component ID to subscribe to.
  uint64 component_id = 1;
}

// A data sample from a component in the microgrid.
// Components belonging to all categories and types can be represented using
// this message.
message ComponentData {
  // The timestamp of when the data was measured.
  google.protobuf.Timestamp ts = 1;

  // The component ID.
  uint64 id = 2;

  // The data object.
  oneof data {
    meter.Meter meter = 3;
    inverter.Inverter inverter = 4;
    battery.Battery battery = 5;
    ev_charger.EvCharger ev_charger = 6;
    relay.Relay relay = 8;
    precharger.Precharger precharger = 9;
  }
}

// Request parameters for the RPC `SubscribeSensorData`.
message SubscribeSensorDataRequest {
  // The sensor ID to subscribe to.
  uint64 sensor_id = 1;
}

// A data sample from a sensor in the microgrid.
message SensorData {
  // The timestamp of when the data was measured.
  google.protobuf.Timestamp ts = 1;

  // The sensor ID.
  uint64 id = 2;

  // The data object.
  sensor.Sensor data = 7;
}

// An enumerated list of metrics whose bounds can be set using the RPCs
// `AddComponentExclusionBounds` and `AddComponentInclusionBounds`.
enum ComponentBoundsTargetMetric {
  COMPONENT_BOUNDS_TARGET_METRIC_UNSPECIFIED = 0;
  COMPONENT_BOUNDS_TARGET_METRIC_POWER_ACTIVE = 1;
  COMPONENT_BOUNDS_TARGET_METRIC_CURRENT = 2;
  COMPONENT_BOUNDS_TARGET_METRIC_CURRENT_PHASE_1 = 3;
  COMPONENT_BOUNDS_TARGET_METRIC_CURRENT_PHASE_2 = 4;
  COMPONENT_BOUNDS_TARGET_METRIC_CURRENT_PHASE_3 = 5;
  COMPONENT_BOUNDS_TARGET_METRIC_POWER_REACTIVE = 6;
}

// Request parameters for the RPC `AddComponentExclusionBounds`.
message AddComponentExclusionBoundsRequest {
  // The ID of the target component.
  uint64 component_id = 1;

  // The target metric whose bounds have to be set.
  ComponentBoundsTargetMetric target_metric = 2;

  // The bounds for the target metric.
  frequenz.api.common.v1.metrics.Bounds bounds = 3;
}

// Response message for the RPC `AddComponentExclusionBounds`.
message AddComponentExclusionBoundsResponse {
  // The timestamp until which the given exclusion bounds will stay in effect.
  google.protobuf.Timestamp ts = 1;
}

// Request parameters for the RPC `AddComponentInclusionBounds`.
message AddComponentInclusionBoundsRequest {
  // The ID of the target component.
  uint64 component_id = 1;

  // The target metric whose bounds have to be set.
  ComponentBoundsTargetMetric target_metric = 2;

  // The bounds for the target metric.
  frequenz.api.common.v1.metrics.Bounds bounds = 3;
}

// Response message for the RPC `AddComponentInclusionBounds`.
message AddComponentInclusionBoundsResponse {
  // The timestamp until which the given inclusion bounds will stay in effect.
  google.protobuf.Timestamp ts = 1;
}

// Request parameters for the RPC `SetComponentPowerActive`.
message SetComponentPowerActiveRequest {
  // The ID of the component to set the output active power of.
  uint64 component_id = 1;

  // The output active power level, in watts.
  // -ve values are for discharging, and +ve values are for charging.
  float power = 2;
}

// Request parameters for the RPC `SetComponentPowerReactive`.
message SetComponentPowerReactiveRequest {
  // The ID of the component to set the output reactive power of.
  uint64 component_id = 1;

  // The output reactive power level, in VAr.
  // -ve values are for inductive (lagging) power , and +ve values are for
  //  capacitive (leading) power.
  float power = 2;
}

// Request parameters for the RPC `StartComponent`.
message StartComponentRequest {
  // The component ID to start.
  uint64 component_id = 1;
}

// Request parameters for the RPC `HotStandbyComponent`.
message HotStandbyComponentRequest {
  // The component ID to set to hot-standby.
  uint64 component_id = 1;
}

// Request parameters for the RPC `ColdStandbyComponent`.
message ColdStandbyComponentRequest {
  // The component ID to set to cold-standby.
  uint64 component_id = 1;
}

// Request parameters for the RPC `StopComponent`.
message StopComponentRequest {
  // The component ID to stop.
  uint64 component_id = 1;
}

// Request parameters for the RPC `AckComponentError`.
message AckComponentErrorRequest {
  // The component ID to acknowledge the error for.
  uint64 component_id = 1;
}
